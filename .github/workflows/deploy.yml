name: Build and Deploy Docker (with optional LINE notify)

on:
  push:
    branches:
      - main  # 如果你的主要分支是 master，請改成 master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
        # 📦 1. 取得 GitHub 原始碼
      - name: Checkout repository
        uses: actions/checkout@v3

        # ⚙️ 2. 啟用 Docker BuildKit 加速建構 （僅對 GitHub Actions 生效，Render 自動啟用 BuildKit）
      - name: Enable Docker BuildKit
        run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV


      # 🧪 注入 .env.production（給 GitHub Pages build 使用）（⚠️ 不是用 GITHUB_ENV）
      - name: Inject .env.production for GitHub Pages
        working-directory: ./frontend
        run: |
          echo "GITHUB_PAGES=${{ secrets.IS_GITHUB_PAGES }}" > .env.production
          echo "VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}" >> .env.production

         # 🔍（除錯）列出環境檔確認內容
      - name: Debug env
        working-directory: ./frontend
        run: cat .env.production

      # 🔧 安裝與打包 Vite 專案
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build Vite project
        working-directory: ./frontend
        run: npm run build
      
      # 🚀 發布到 GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./frontend/dist

        # 🔐 3. 登入 Docker Hub （目前 Render 不會用到，可保留註解供他日使用）
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

        # 🐳 4. 建立 backend 的 Docker image 並 push
      # - name: Build and push backend image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./backend
      #     push: true
      #     tags: your-docker-username/backend:latest

       # 🖼️ 5. 建立 frontend 的 Docker image 並 push
      # - name: Build and push frontend image
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./frontend
      #     push: true
      #     tags: your-docker-username/frontend:latest

     # ☁️（可選）6. Render 部署觸發（Webhook）
     # - name: Trigger Render Deploy via API
     #   run: |
     #     curl -X POST https://api.render.com/deploy/srv-xxx?key=${{ secrets.RENDER_DEPLOY_KEY }}

     # 🖥️（可選）7. SSH 部署自架伺服器
     # - name: SSH Deploy to VPS
     #   uses: appleboy/ssh-action@v1.0.0
     #   with:
     #     host: ${{ secrets.VPS_HOST }}
     #     username: ${{ secrets.VPS_USER }}
     #     key: ${{ secrets.VPS_PRIVATE_KEY }}
     #     script: |
     #       docker pull your-docker-username/backend:latest
     #       docker pull your-docker-username/frontend:latest
     #       docker-compose -f /your/path/docker-compose.yml up -d --build

       # 🔔 LINE 通知整合（改為 Messaging API）
      - name: Notify LINE via Messaging API
        if: always()
        run: |
          curl -X POST https://api.line.me/v2/bot/message/push \
            -H 'Content-Type: application/json' \
            -H 'Authorization: Bearer ${{ secrets.LINE_CHANNEL_TOKEN }}' \
            -d '{
              "to": "${{ secrets.LINE_USER_ID }}",
              "messages":[
                {
                  "type":"text",
                  "text":"📦 部署流程已結束\n狀態：${{ job.status == 'success' && '✅ 成功' || '❌ 失敗' }}\nRepo: ${{ github.repository }}\n分支: ${{ github.ref_name }}"
                }
              ]
            }'

     # 🔕 Slack 通知暫時註解（可切換）
     # - name: Notify Slack
     #   uses: 8398a7/action-slack@v3
     #   with:
     #     status: custom
     #     fields: repo,message,commit,author
     #     custom_payload: |
     #       {"text": "🚀 部署成功：${{ github.repository }}"}
     #   env:
     #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
